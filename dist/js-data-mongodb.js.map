{"version":3,"file":null,"sources":["../src/index.js"],"sourcesContent":["import {MongoClient} from 'mongodb'\nimport {ObjectID} from 'bson'\nimport {utils} from 'js-data'\nimport {\n  Adapter,\n  reserved\n} from 'js-data-adapter'\nimport underscore from 'mout/string/underscore'\n\nconst DEFAULTS = {\n  /**\n   * Convert ObjectIDs to strings when pulling records out of the database.\n   *\n   * @name MongoDBAdapter#translateId\n   * @type {boolean}\n   * @default true\n   */\n  translateId: true,\n  /**\n   * Convert fields of record from databse that are ObjectIDs to strings\n   * @type {Boolean}\n   * @default false\n   */\n  translateObjectIDs: false,\n\n  /**\n   * MongoDB URI.\n   *\n   * @name MongoDBAdapter#uri\n   * @type {string}\n   * @default mongodb://localhost:27017\n   */\n  uri: 'mongodb://localhost:27017'\n}\n\nconst COUNT_OPTS_DEFAULTS = {}\nconst FIND_OPTS_DEFAULTS = {}\nconst FIND_ONE_OPTS_DEFAULTS = {}\nconst INSERT_OPTS_DEFAULTS = {}\nconst INSERT_MANY_OPTS_DEFAULTS = {}\nconst UPDATE_OPTS_DEFAULTS = {}\nconst REMOVE_OPTS_DEFAULTS = {}\n\n/**\n * MongoDBAdapter class.\n *\n * @example\n * // Use Container instead of DataStore on the server\n * import {Container} from 'js-data'\n * import MongoDBAdapter from 'js-data-mongodb'\n *\n * // Create a store to hold your Mappers\n * const store = new Container({\n *   mapperDefaults: {\n *     // MongoDB uses \"_id\" as the primary key\n *     idAttribute: '_id'\n *   }\n * })\n *\n * // Create an instance of MongoDBAdapter with default settings\n * const adapter = new MongoDBAdapter()\n *\n * // Mappers in \"store\" will use the MongoDB adapter by default\n * store.registerAdapter('mongodb', adapter, { default: true })\n *\n * // Create a Mapper that maps to a \"user\" collection\n * store.defineMapper('user')\n *\n * @class MongoDBAdapter\n * @extends Adapter\n * @param {object} [opts] Configuration options.\n * @param {boolean} [opts.debug=false] See {@link Adapter#debug}.\n * @param {object} [opts.countOpts] See {@link MongoDBAdapter#countOpts}.\n * @param {object} [opts.findOpts] See {@link MongoDBAdapter#findOpts}.\n * @param {object} [opts.findOneOpts] See {@link MongoDBAdapter#findOneOpts}.\n * @param {object} [opts.insertOpts] See {@link MongoDBAdapter#insertOpts}.\n * @param {object} [opts.insertManyOpts] See {@link MongoDBAdapter#insertManyOpts}.\n * @param {boolean} [opts.raw=false] See {@link Adapter#raw}.\n * @param {object} [opts.removeOpts] See {@link MongoDBAdapter#removeOpts}.\n * @param {boolean} [opts.translateId=true] See {@link MongoDBAdapter#translateId}.\n * @param {object} [opts.updateOpts] See {@link MongoDBAdapter#updateOpts}.\n * @param {string} [opts.uri=\"mongodb://localhost:27017\"] See {@link MongoDBAdapter#uri}.\n */\nexport function MongoDBAdapter (opts) {\n  utils.classCallCheck(this, MongoDBAdapter)\n  opts || (opts = {})\n  if (utils.isString(opts)) {\n    opts = { uri: opts }\n  }\n  utils.fillIn(opts, DEFAULTS)\n\n  // Setup non-enumerable properties\n  Object.defineProperties(this, {\n    /**\n     * A Promise that resolves to a reference to the MongoDB client being used by\n     * this adapter.\n     *\n     * @name MongoDBAdapter#client\n     * @type {Promise}\n     */\n    client: {\n      writable: true,\n      value: undefined\n    },\n\n    _db: {\n      writable: true,\n      value: undefined\n    }\n  })\n\n  Adapter.call(this, opts)\n\n  /**\n   * Default options to pass to collection#count.\n   *\n   * @name MongoDBAdapter#countOpts\n   * @type {object}\n   * @default {}\n   */\n  this.countOpts || (this.countOpts = {})\n  utils.fillIn(this.countOpts, COUNT_OPTS_DEFAULTS)\n\n  /**\n   * Default options to pass to collection#find.\n   *\n   * @name MongoDBAdapter#findOpts\n   * @type {object}\n   * @default {}\n   */\n  this.findOpts || (this.findOpts = {})\n  utils.fillIn(this.findOpts, FIND_OPTS_DEFAULTS)\n\n  /**\n   * Default options to pass to collection#findOne.\n   *\n   * @name MongoDBAdapter#findOneOpts\n   * @type {object}\n   * @default {}\n   */\n  this.findOneOpts || (this.findOneOpts = {})\n  utils.fillIn(this.findOneOpts, FIND_ONE_OPTS_DEFAULTS)\n\n  /**\n   * Default options to pass to collection#insert.\n   *\n   * @name MongoDBAdapter#insertOpts\n   * @type {object}\n   * @default {}\n   */\n  this.insertOpts || (this.insertOpts = {})\n  utils.fillIn(this.insertOpts, INSERT_OPTS_DEFAULTS)\n\n  /**\n   * Default options to pass to collection#insertMany.\n   *\n   * @name MongoDBAdapter#insertManyOpts\n   * @type {object}\n   * @default {}\n   */\n  this.insertManyOpts || (this.insertManyOpts = {})\n  utils.fillIn(this.insertManyOpts, INSERT_MANY_OPTS_DEFAULTS)\n\n  /**\n   * Default options to pass to collection#update.\n   *\n   * @name MongoDBAdapter#updateOpts\n   * @type {object}\n   * @default {}\n   */\n  this.updateOpts || (this.updateOpts = {})\n  utils.fillIn(this.updateOpts, UPDATE_OPTS_DEFAULTS)\n\n  /**\n   * Default options to pass to collection#update.\n   *\n   * @name MongoDBAdapter#removeOpts\n   * @type {object}\n   * @default {}\n   */\n  this.removeOpts || (this.removeOpts = {})\n  utils.fillIn(this.removeOpts, REMOVE_OPTS_DEFAULTS)\n\n  this.client = new utils.Promise((resolve, reject) => {\n    MongoClient.connect(opts.uri, (err, db) => {\n      if (err) {\n        return reject(err)\n      }\n      this._db = db\n      resolve(db)\n    })\n  })\n}\n\nAdapter.extend({\n  constructor: MongoDBAdapter,\n\n  _translateObjectIDs (r, opts) {\n    opts || (opts = {})\n    if (this.getOpt('translateObjectIDs', opts)) {\n      this._translateFieldObjectIDs(r)\n    } else if (this.getOpt('translateId', opts)) {\n      this._translateId(r)\n    }\n    return r\n  },\n\n  /**\n   * Translate ObjectIDs to strings.\n   *\n   * @method MongoDBAdapter#_translateId\n   * @return {*}\n   */\n  _translateId (r) {\n    if (utils.isArray(r)) {\n      r.forEach((_r) => {\n        const __id = _r._id ? _r._id.toString() : _r._id\n        _r._id = typeof __id === 'string' ? __id : _r._id\n      })\n    } else if (utils.isObject(r)) {\n      const __id = r._id ? r._id.toString() : r._id\n      r._id = typeof __id === 'string' ? __id : r._id\n    }\n    return r\n  },\n\n  _translateFieldObjectIDs (r) {\n    const _checkFields = (r) => {\n      for (let field in r) {\n        if (r[field]._bsontype === 'ObjectID') {\n          r[field] = typeof r[field].toString() === 'string' ? r[field].toString() : r[field]\n        }\n      }\n    }\n    if (utils.isArray(r)) {\n      r.forEach((_r) => {\n        _checkFields(_r)\n      })\n    } else if (utils.isObject(r)) {\n      _checkFields(r)\n    }\n    return r\n  },\n\n  /**\n   * Retrieve the number of records that match the selection query.\n   *\n   * @method MongoDBAdapter#count\n   * @param {object} mapper The mapper.\n   * @param {object} query Selection query.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.countOpts] Options to pass to collection#count.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {string[]} [opts.with=[]] Relations to eager load.\n   * @return {Promise}\n   */\n\n  /**\n   * Retrieve the records that match the selection query. Internal method used\n   * by Adapter#count.\n   *\n   * @method MongoDBAdapter#_count\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {object} query Selection query.\n   * @param {object} [opts] Configuration options.\n   * @return {Promise}\n   */\n  _count (mapper, query, opts) {\n    opts || (opts = {})\n\n    return this._run((client, success, failure) => {\n      const collectionId = this._getCollectionId(mapper, opts)\n      const countOpts = this.getOpt('countOpts', opts)\n      utils.fillIn(countOpts, this.getQueryOptions(mapper, query))\n\n      const mongoQuery = this.getQuery(mapper, query)\n\n      client\n        .collection(collectionId)\n        .count(mongoQuery, countOpts, (err, count) => err ? failure(err) : success([count, {}]))\n    })\n  },\n\n  /**\n   * Create a new record.\n   *\n   * @method MongoDBAdapter#create\n   * @param {object} mapper The mapper.\n   * @param {object} props The record to be created.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.insertOpts] Options to pass to collection#insert.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * @return {Promise}\n   */\n\n  /**\n   * Create a new record. Internal method used by Adapter#create.\n   *\n   * @method MongoDBAdapter#_create\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {object} props The record to be created.\n   * @param {object} [opts] Configuration options.\n   * @return {Promise}\n   */\n  _create (mapper, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    return this._run((client, success, failure) => {\n      const collectionId = this._getCollectionId(mapper, opts)\n      const insertOpts = this.getOpt('insertOpts', opts)\n\n      const collection = client.collection(collectionId)\n      const handler = (err, cursor) => err ? failure(err) : success(cursor)\n\n      props = utils.plainCopy(props)\n\n      if (collection.insertOne) {\n        collection\n          .insertOne(props, insertOpts, handler)\n      } else {\n        collection\n          .insert(props, insertOpts, handler)\n      }\n    }).then((cursor) => {\n      let record\n      let r = cursor.ops ? cursor.ops : cursor\n      this._translateObjectIDs(r, opts)\n      record = utils.isArray(r) ? r[0] : r\n      cursor.connection = undefined\n      return [record, cursor]\n    })\n  },\n\n  /**\n   * Create multiple records in a single batch.\n   *\n   * @method MongoDBAdapter#createMany\n   * @param {object} mapper The mapper.\n   * @param {object} props The records to be created.\n   * @param {object} [opts] Configuration options.\n   * @param {object} [opts.insertManyOpts] Options to pass to\n   * collection#insertMany.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @return {Promise}\n   */\n\n  /**\n   * Create multiple records in a single batch. Internal method used by\n   * Adapter#createMany.\n   *\n   * @method MongoDBAdapter#_createMany\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {object} props The records to be created.\n   * @param {object} [opts] Configuration options.\n   * @return {Promise}\n   */\n  _createMany (mapper, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    return this._run((client, success, failure) => {\n      const collectionId = this._getCollectionId(mapper, opts)\n      const insertManyOpts = this.getOpt('insertManyOpts', opts)\n      props = utils.plainCopy(props)\n\n      client.collection(collectionId)\n        .insertMany(props, insertManyOpts, (err, cursor) => err ? failure(err) : success(cursor))\n    }).then((cursor) => {\n      let records = []\n      let r = cursor.ops ? cursor.ops : cursor\n      this._translateObjectIDs(r, opts)\n      records = r\n      cursor.connection = undefined\n      return [records, cursor]\n    })\n  },\n\n  /**\n   * Destroy the record with the given primary key.\n   *\n   * @method MongoDBAdapter#destroy\n   * @param {object} mapper The mapper.\n   * @param {(string|number)} id Primary key of the record to destroy.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {object} [opts.removeOpts] Options to pass to collection#remove.\n   * @return {Promise}\n   */\n\n  /**\n   * Destroy the record with the given primary key. Internal method used by\n   * Adapter#destroy.\n   *\n   * @method MongoDBAdapter#_destroy\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {(string|number)} id Primary key of the record to destroy.\n   * @param {object} [opts] Configuration options.\n   * @return {Promise}\n   */\n  _destroy (mapper, id, opts) {\n    opts || (opts = {})\n\n    return this._run((client, success, failure) => {\n      const collectionId = this._getCollectionId(mapper, opts)\n      const removeOpts = this.getOpt('removeOpts', opts)\n\n      const mongoQuery = {\n        [mapper.idAttribute]: this.toObjectID(mapper, id)\n      }\n      const collection = client.collection(collectionId)\n      const handler = (err, cursor) => err ? failure(err) : success(cursor)\n\n      if (collection.deleteOne) {\n        collection\n          .deleteOne(mongoQuery, removeOpts, handler)\n      } else {\n        collection\n          .remove(mongoQuery, removeOpts, handler)\n      }\n    }).then((cursor) => [undefined, cursor])\n  },\n\n  /**\n   * Destroy the records that match the selection query.\n   *\n   * @method MongoDBAdapter#destroyAll\n   * @param {object} mapper the mapper.\n   * @param {object} [query] Selection query.\n   * @param {object} [query.where] Filtering criteria.\n   * @param {string|Array} [query.orderBy] Sorting criteria.\n   * @param {string|Array} [query.sort] Same as `query.sort`.\n   * @param {number} [query.limit] Limit results.\n   * @param {number} [query.skip] Offset results.\n   * @param {number} [query.offset] Same as `query.skip`.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {object} [opts.removeOpts] Options to pass to collection#remove.\n   * @return {Promise}\n   */\n\n  /**\n   * Destroy the records that match the selection query. Internal method used by\n   * Adapter#destroyAll.\n   *\n   * @method MongoDBAdapter#_destroyAll\n   * @private\n   * @param {object} mapper the mapper.\n   * @param {object} [query] Selection query.\n   * @param {object} [opts] Configuration options.\n   * @return {Promise}\n   */\n  _destroyAll (mapper, query, opts) {\n    query || (query = {})\n    opts || (opts = {})\n\n    return this._run((client, success, failure) => {\n      const collectionId = this._getCollectionId(mapper, opts)\n      const removeOpts = this.getOpt('removeOpts', opts)\n      utils.fillIn(removeOpts, this.getQueryOptions(mapper, query))\n\n      const mongoQuery = this.getQuery(mapper, query)\n      const collection = client.collection(collectionId)\n      const handler = (err, cursor) => err ? failure(err) : success(cursor)\n\n      if (collection.deleteMany) {\n        collection\n          .deleteMany(mongoQuery, removeOpts, handler)\n      } else {\n        collection\n          .remove(mongoQuery, removeOpts, handler)\n      }\n    }).then((cursor) => {\n      cursor.connection = undefined\n      return [undefined, cursor]\n    })\n  },\n\n  /**\n   * Retrieve the record with the given primary key.\n   *\n   * @method MongoDBAdapter#find\n   * @param {object} mapper The mapper.\n   * @param {(string|number)} id Primary key of the record to retrieve.\n   * @param {object} [opts] Configuration options.\n   * @param {string|string[]|object} [opts.fields] Select a subset of fields to be returned.\n   * @param {object} [opts.findOneOpts] Options to pass to collection#findOne.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {string[]} [opts.with=[]] Relations to eager load.\n   * @return {Promise}\n   */\n\n  /**\n   * Retrieve the record with the given primary key. Internal method used by\n   * Adapter#find.\n   *\n   * @method MongoDBAdapter#_find\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {(string|number)} id Primary key of the record to retrieve.\n   * @param {object} [opts] Configuration options.\n   * @param {string|string[]|object} [opts.fields] Select a subset of fields to be returned.\n   * @return {Promise}\n   */\n  _find (mapper, id, opts) {\n    opts || (opts = {})\n    opts.with || (opts.with = [])\n\n    return this._run((client, success, failure) => {\n      const collectionId = this._getCollectionId(mapper, opts)\n      const findOneOpts = this.getOpt('findOneOpts', opts)\n      findOneOpts.fields = this._getFields(mapper, opts)\n\n      const mongoQuery = {\n        [mapper.idAttribute]: this.toObjectID(mapper, id)\n      }\n\n      client.collection(collectionId)\n        .findOne(mongoQuery, findOneOpts, (err, record) => err ? failure(err) : success(record))\n    }).then((record) => {\n      if (record) {\n        this._translateObjectIDs(record, opts)\n      }\n      return [record, {}]\n    })\n  },\n\n  /**\n   * Retrieve the records that match the selection query.\n   *\n   * @method MongoDBAdapter#findAll\n   * @param {object} mapper The mapper.\n   * @param {object} query Selection query.\n   * @param {object} [opts] Configuration options.\n   * @param {string|string[]|object} [opts.fields] Select a subset of fields to be returned.\n   * @param {object} [opts.findOpts] Options to pass to collection#find.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {string[]} [opts.with=[]] Relations to eager load.\n   * @return {Promise}\n   */\n\n  /**\n   * Retrieve the records that match the selection query. Internal method used\n   * by Adapter#findAll.\n   *\n   * @method MongoDBAdapter#_findAll\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {object} query Selection query.\n   * @param {object} [opts] Configuration options.\n   * @param {string|string[]|object} [opts.fields] Select a subset of fields to be returned.\n   * @return {Promise}\n   */\n  _findAll (mapper, query, opts) {\n    opts || (opts = {})\n\n    return this._run((client, success, failure) => {\n      const collectionId = this._getCollectionId(mapper, opts)\n      const findOpts = this.getOpt('findOpts', opts)\n      utils.fillIn(findOpts, this.getQueryOptions(mapper, query))\n      findOpts.fields = this._getFields(mapper, opts)\n\n      const mongoQuery = this.getQuery(mapper, query)\n\n      client.collection(collectionId)\n        .find(mongoQuery, findOpts)\n        .toArray((err, records) => err ? failure(err) : success(records))\n    }).then((records) => {\n      this._translateObjectIDs(records, opts)\n      return [records, {}]\n    })\n  },\n\n  _getCollectionId (mapper, opts) {\n    opts || (opts = {})\n    return opts.table || opts.collection || mapper.table || mapper.collection || underscore(mapper.name)\n  },\n\n  _getFields (mapper, opts) {\n    opts || (opts = {})\n    if (utils.isString(opts.fields)) {\n      opts.fields = { [opts.fields]: 1 }\n    } else if (utils.isArray(opts.fields)) {\n      const fields = {}\n      opts.fields.forEach((field) => {\n        fields[field] = 1\n      })\n      return fields\n    }\n    return opts.fields\n  },\n\n  _run (cb) {\n    if (this._db) {\n      // Use the cached db object\n      return new utils.Promise((resolve, reject) => {\n        cb(this._db, resolve, reject)\n      })\n    }\n    return this.getClient().then((client) => {\n      return new utils.Promise((resolve, reject) => {\n        cb(client, resolve, reject)\n      })\n    })\n  },\n\n  /**\n   * Apply the given update to the record with the specified primary key.\n   *\n   * @method MongoDBAdapter#update\n   * @param {object} mapper The mapper.\n   * @param {(string|number)} id The primary key of the record to be updated.\n   * @param {object} props The update to apply to the record.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {object} [opts.updateOpts] Options to pass to collection#update.\n   * @return {Promise}\n   */\n\n  /**\n   * Apply the given update to the record with the specified primary key.\n   * Internal method used by Adapter#update.\n   *\n   * @method MongoDBAdapter#_update\n   * @private\n   * @param {object} mapper The mapper.\n   * @param {(string|number)} id The primary key of the record to be updated.\n   * @param {object} props The update to apply to the record.\n   * @param {object} [opts] Configuration options.\n   * @return {Promise}\n   */\n  _update (mapper, id, props, opts) {\n    props || (props = {})\n    opts || (opts = {})\n\n    return this._find(mapper, id, { raw: false })\n      .then((result) => {\n        if (!result[0]) {\n          throw new Error('Not Found')\n        }\n        return this._run((client, success, failure) => {\n          const collectionId = this._getCollectionId(mapper, opts)\n          const updateOpts = this.getOpt('updateOpts', opts)\n\n          const mongoQuery = {\n            [mapper.idAttribute]: this.toObjectID(mapper, id)\n          }\n          const collection = client.collection(collectionId)\n          const handler = (err, cursor) => err ? failure(err) : success(cursor)\n\n          if (collection.updateOne) {\n            collection\n              .updateOne(mongoQuery, { $set: props }, updateOpts, handler)\n          } else {\n            collection\n              .update(mongoQuery, { $set: props }, updateOpts, handler)\n          }\n        })\n      })\n      .then((cursor) => {\n        return this._find(mapper, id, { raw: false })\n          .then((result) => {\n            cursor.connection = undefined\n            return [result[0], cursor]\n          })\n      })\n  },\n\n  /**\n   * Apply the given update to all records that match the selection query.\n   *\n   * @method MongoDBAdapter#updateAll\n   * @param {object} mapper The mapper.\n   * @param {object} props The update to apply to the selected records.\n   * @param {object} [query] Selection query.\n   * @param {object} [opts] Configuration options.\n   * @param {boolean} [opts.raw=false] Whether to return a more detailed\n   * response object.\n   * @param {object} [opts.updateOpts] Options to pass to collection#update.\n   * @return {Promise}\n   */\n\n  /**\n   * Apply the given update to all records that match the selection query.\n   * Internal method used by Adapter#updateAll.\n   *\n   * @method MongoDBAdapter#_updateAll\n   * @private\n   * @param {Object} mapper The mapper.\n   * @param {Object} props The update to apply to the selected records.\n   * @param {Object} [query] Selection query.\n   * @param {Object} [opts] Configuration options.\n   * @return {Promise}\n   */\n  _updateAll (mapper, props, query, opts) {\n    props || (props = {})\n    query || (query = {})\n    opts || (opts = {})\n    let ids\n\n    return this._run((client, success, failure) => {\n      return this._findAll(mapper, query, { raw: false }).then((result) => {\n        const collectionId = this._getCollectionId(mapper, opts)\n        const updateOpts = this.getOpt('updateOpts', opts)\n        updateOpts.multi = true\n\n        const queryOptions = this.getQueryOptions(mapper, query)\n        queryOptions.$set = props\n        ids = result[0].map((record) => this.toObjectID(mapper, record[mapper.idAttribute]))\n\n        const mongoQuery = this.getQuery(mapper, query)\n        const collection = client.collection(collectionId)\n        const handler = (err, cursor) => err ? failure(err) : success(cursor)\n\n        if (collection.updateMany) {\n          collection\n            .updateMany(mongoQuery, queryOptions, updateOpts, handler)\n        } else {\n          collection\n            .update(mongoQuery, queryOptions, updateOpts, handler)\n        }\n      })\n    }).then((cursor) => {\n      const query = {\n        [mapper.idAttribute]: {\n          'in': ids\n        }\n      }\n      return this._findAll(mapper, query, { raw: false }).then((result) => {\n        cursor.connection = undefined\n        return [result[0], cursor]\n      })\n    })\n  },\n\n  /**\n   * Return a Promise that resolves to a reference to the MongoDB client being\n   * used by this adapter.\n   *\n   * Useful when you need to do anything custom with the MongoDB client library.\n   *\n   * @method MongoDBAdapter#getClient\n   * @return {object} MongoDB client.\n   */\n  getClient () {\n    return this.client\n  },\n\n  /**\n   * Map filtering params in a selection query to MongoDB a filtering object.\n   *\n   * Handles the following:\n   *\n   * - where\n   *   - and bunch of filtering operators\n   *\n   * @method MongoDBAdapter#getQuery\n   * @return {object}\n   */\n  getQuery (mapper, query) {\n    query = utils.plainCopy(query || {})\n    query.where || (query.where = {})\n\n    utils.forOwn(query, function (config, keyword) {\n      if (reserved.indexOf(keyword) === -1) {\n        if (utils.isObject(config)) {\n          query.where[keyword] = config\n        } else {\n          query.where[keyword] = {\n            '==': config\n          }\n        }\n        delete query[keyword]\n      }\n    })\n\n    let mongoQuery = {}\n\n    if (Object.keys(query.where).length !== 0) {\n      utils.forOwn(query.where, function (criteria, field) {\n        if (!utils.isObject(criteria)) {\n          query.where[field] = {\n            '==': criteria\n          }\n        }\n        utils.forOwn(criteria, function (v, op) {\n          if (op === '==' || op === '===' || op === 'contains') {\n            mongoQuery[field] = v\n          } else if (op === '!=' || op === '!==' || op === 'notContains') {\n            mongoQuery[field] = mongoQuery[field] || {}\n            mongoQuery[field].$ne = v\n          } else if (op === '>') {\n            mongoQuery[field] = mongoQuery[field] || {}\n            mongoQuery[field].$gt = v\n          } else if (op === '>=') {\n            mongoQuery[field] = mongoQuery[field] || {}\n            mongoQuery[field].$gte = v\n          } else if (op === '<') {\n            mongoQuery[field] = mongoQuery[field] || {}\n            mongoQuery[field].$lt = v\n          } else if (op === '<=') {\n            mongoQuery[field] = mongoQuery[field] || {}\n            mongoQuery[field].$lte = v\n          } else if (op === 'in') {\n            mongoQuery[field] = mongoQuery[field] || {}\n            mongoQuery[field].$in = v\n          } else if (op === 'notIn') {\n            mongoQuery[field] = mongoQuery[field] || {}\n            mongoQuery[field].$nin = v\n          } else if (op === '|==' || op === '|===' || op === '|contains') {\n            mongoQuery.$or = mongoQuery.$or || []\n            let orEqQuery = {}\n            orEqQuery[field] = v\n            mongoQuery.$or.push(orEqQuery)\n          } else if (op === '|!=' || op === '|!==' || op === '|notContains') {\n            mongoQuery.$or = mongoQuery.$or || []\n            let orNeQuery = {}\n            orNeQuery[field] = {\n              '$ne': v\n            }\n            mongoQuery.$or.push(orNeQuery)\n          } else if (op === '|>') {\n            mongoQuery.$or = mongoQuery.$or || []\n            let orGtQuery = {}\n            orGtQuery[field] = {\n              '$gt': v\n            }\n            mongoQuery.$or.push(orGtQuery)\n          } else if (op === '|>=') {\n            mongoQuery.$or = mongoQuery.$or || []\n            let orGteQuery = {}\n            orGteQuery[field] = {\n              '$gte': v\n            }\n            mongoQuery.$or.push(orGteQuery)\n          } else if (op === '|<') {\n            mongoQuery.$or = mongoQuery.$or || []\n            let orLtQuery = {}\n            orLtQuery[field] = {\n              '$lt': v\n            }\n            mongoQuery.$or.push(orLtQuery)\n          } else if (op === '|<=') {\n            mongoQuery.$or = mongoQuery.$or || []\n            let orLteQuery = {}\n            orLteQuery[field] = {\n              '$lte': v\n            }\n            mongoQuery.$or.push(orLteQuery)\n          } else if (op === '|in') {\n            mongoQuery.$or = mongoQuery.$or || []\n            let orInQuery = {}\n            orInQuery[field] = {\n              '$in': v\n            }\n            mongoQuery.$or.push(orInQuery)\n          } else if (op === '|notIn') {\n            mongoQuery.$or = mongoQuery.$or || []\n            let orNinQuery = {}\n            orNinQuery[field] = {\n              '$nin': v\n            }\n            mongoQuery.$or.push(orNinQuery)\n          }\n        })\n      })\n    }\n\n    return mongoQuery\n  },\n\n  /**\n   * Map non-filtering params in a selection query to MongoDB query options.\n   *\n   * Handles the following:\n   *\n   * - limit\n   * - skip/offset\n   * - orderBy/sort\n   *\n   * @method MongoDBAdapter#getQueryOptions\n   * @return {object}\n   */\n  getQueryOptions (mapper, query) {\n    query = utils.plainCopy(query || {})\n    query.orderBy = query.orderBy || query.sort\n    query.skip = query.skip || query.offset\n\n    let queryOptions = {}\n\n    if (query.orderBy) {\n      if (utils.isString(query.orderBy)) {\n        query.orderBy = [\n          [query.orderBy, 'asc']\n        ]\n      }\n      for (var i = 0; i < query.orderBy.length; i++) {\n        if (utils.isString(query.orderBy[i])) {\n          query.orderBy[i] = [query.orderBy[i], 'asc']\n        }\n      }\n      queryOptions.sort = query.orderBy\n    }\n\n    if (query.skip) {\n      queryOptions.skip = +query.skip\n    }\n\n    if (query.limit) {\n      queryOptions.limit = +query.limit\n    }\n\n    return queryOptions\n  },\n\n  /**\n   * Turn an _id into an ObjectID if it isn't already an ObjectID.\n   *\n   * @method MongoDBAdapter#toObjectID\n   * @return {*}\n   */\n  toObjectID (mapper, id) {\n    if (id !== undefined && mapper.idAttribute === '_id' && typeof id === 'string' && ObjectID.isValid(id) && !(id instanceof ObjectID)) {\n      return new ObjectID(id)\n    }\n    return id\n  },\n\n  /**\n   * Return the foreignKey from the given record for the provided relationship.\n   *\n   * @method MongoDBAdapter#makeBelongsToForeignKey\n   * @return {*}\n   */\n  makeBelongsToForeignKey (mapper, def, record) {\n    return this.toObjectID(def.getRelation(), Adapter.prototype.makeBelongsToForeignKey.call(this, mapper, def, record))\n  },\n\n  /**\n   * Return the localKeys from the given record for the provided relationship.\n   *\n   * Override with care.\n   *\n   * @method MongoDBAdapter#makeHasManyLocalKeys\n   * @return {*}\n   */\n  makeHasManyLocalKeys (mapper, def, record) {\n    const relatedMapper = def.getRelation()\n    const localKeys = Adapter.prototype.makeHasManyLocalKeys.call(this, mapper, def, record)\n    return localKeys.map((key) => this.toObjectID(relatedMapper, key))\n  },\n\n  /**\n   * Not supported.\n   *\n   * @method MongoDBAdapter#updateMany\n   */\n  updateMany () {\n    throw new Error('not supported!')\n  }\n})\n\n/**\n * Details of the current version of the `js-data-mongodb` module.\n *\n * @example\n * import {version} from 'js-data-mongodb'\n * console.log(version.full)\n *\n * @name module:js-data-mongodb.version\n * @type {object}\n * @property {string} version.full The full semver value.\n * @property {number} version.major The major version number.\n * @property {number} version.minor The minor version number.\n * @property {number} version.patch The patch version number.\n * @property {(string|boolean)} version.alpha The alpha version value,\n * otherwise `false` if the current version is not alpha.\n * @property {(string|boolean)} version.beta The beta version value,\n * otherwise `false` if the current version is not beta.\n */\nexport const version = '<%= version %>'\n\n/**\n * {@link MongoDBAdapter} class.\n *\n * @example\n * import {MongoDBAdapter} from 'js-data-mongodb'\n * const adapter = new MongoDBAdapter()\n *\n * @name module:js-data-mongodb.MongoDBAdapter\n * @see MongoDBAdapter\n * @type {Constructor}\n */\n\n/**\n * Registered as `js-data-mongodb` in NPM.\n *\n * @example <caption>Install from NPM</caption>\n * npm i --save js-data-mongodb@rc js-data@rc mongodb bson\n *\n * @example <caption>Load via CommonJS</caption>\n * var MongoDBAdapter = require('js-data-mongodb').MongoDBAdapter\n * var adapter = new MongoDBAdapter()\n *\n * @example <caption>Load via ES2015 Modules</caption>\n * import {MongoDBAdapter} from 'js-data-mongodb'\n * const adapter = new MongoDBAdapter()\n *\n * @module js-data-mongodb\n */\n\n /**\n * Create a subclass of this MongoDBAdapter:\n * @example <caption>MongoDBAdapter.extend</caption>\n * // Normally you would do: import { MongoDBAdapter } from 'js-data-mongodb'\n * const JSDataMongoDB = require('js-data-mongodb')\n * const { MongoDBAdapter } = JSDataMongoDB\n * console.log('Using JSDataMongoDB v' + JSDataMongoDB.version.full)\n *\n * // Extend the class using ES2015 class syntax.\n * class CustomMongoDBAdapterClass extends MongoDBAdapter {\n *   foo () { return 'bar' }\n *   static beep () { return 'boop' }\n * }\n * const customMongoDBAdapter = new CustomMongoDBAdapterClass()\n * console.log(customMongoDBAdapter.foo())\n * console.log(CustomMongoDBAdapterClass.beep())\n *\n * // Extend the class using alternate method.\n * const OtherMongoDBAdapterClass = MongoDBAdapter.extend({\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const otherMongoDBAdapter = new OtherMongoDBAdapterClass()\n * console.log(otherMongoDBAdapter.foo())\n * console.log(OtherMongoDBAdapterClass.beep())\n *\n * // Extend the class, providing a custom constructor.\n * function AnotherMongoDBAdapterClass () {\n *   MongoDBAdapter.call(this)\n *   this.created_at = new Date().getTime()\n * }\n * MongoDBAdapter.extend({\n *   constructor: AnotherMongoDBAdapterClass,\n *   foo () { return 'bar' }\n * }, {\n *   beep () { return 'boop' }\n * })\n * const anotherMongoDBAdapter = new AnotherMongoDBAdapterClass()\n * console.log(anotherMongoDBAdapter.created_at)\n * console.log(anotherMongoDBAdapter.foo())\n * console.log(AnotherMongoDBAdapterClass.beep())\n *\n * @method MongoDBAdapter.extend\n * @param {object} [props={}] Properties to add to the prototype of the\n * subclass.\n * @param {object} [props.constructor] Provide a custom constructor function\n * to be used as the subclass itself.\n * @param {object} [classProps={}] Static properties to add to the subclass.\n * @returns {Constructor} Subclass of this MongoDBAdapter class.\n * @since 3.0.0\n */\n"],"names":["utils","Adapter","reserved","ObjectID"],"mappings":"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"}